//! SeaORM Entity. Generated by sea-orm-codegen 0.1.2

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "products"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: Uuid,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
    pub name: Option<String>,
    pub description: Option<String>,
    pub category: Option<String>,
    pub sub_category: Option<String>,
    pub images: Option<String>,
    pub price: f64,
    pub compare_price: f64,
    pub cost_per_item: f64,
    pub is_charge_tax: Option<bool>,
    pub sku: Option<String>,
    pub quantity: Option<i32>,
    pub is_variant_exist: Option<bool>,
    pub status: String,
    pub vendor_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    CreatedAt,
    UpdatedAt,
    Name,
    Description,
    Category,
    SubCategory,
    Images,
    Price,
    ComparePrice,
    CostPerItem,
    IsChargeTax,
    Sku,
    Quantity,
    IsVariantExist,
    Status,
    VendorId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::CreatedAt => ColumnType::Timestamp.def(),
            Self::UpdatedAt => ColumnType::Timestamp.def().null(),
            Self::Name => ColumnType::String(None).def().null(),
            Self::Description => ColumnType::String(None).def().null(),
            Self::Category => ColumnType::String(None).def().null(),
            Self::SubCategory => ColumnType::String(None).def().null(),
            Self::Images => ColumnType::String(None).def().null(),
            Self::Price => ColumnType::Double.def(),
            Self::ComparePrice => ColumnType::Double.def(),
            Self::CostPerItem => ColumnType::Double.def(),
            Self::IsChargeTax => ColumnType::Boolean.def().null(),
            Self::Sku => ColumnType::String(None).def().null(),
            Self::Quantity => ColumnType::Integer.def().null(),
            Self::IsVariantExist => ColumnType::Boolean.def().null(),
            Self::Status => ColumnType::Custom("USER-DEFINED".to_owned()).def(),
            Self::VendorId => ColumnType::Uuid.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            _ => panic!("No RelationDef"),
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}
